unit UFuncionario;

interface

type
  TFuncionario = class(TObject)
  private
    { private declarations }
    FId : Integer;
    FNome : String;
    FDepId : Integer;
    FSenha: string;
  protected
    { protected declarations }
  public
    { public declarations }
    Property Id : Integer read FId write FId;
    Property Nome : String read FNome write FNome;
    Property DepId : Integer read FDepId write FDepId;
    property Senha: String read FSenha write FSenha;

    Function incluir : boolean;
    function alterar: Boolean;
    function excluir: Boolean;
    function pesquisarId: Boolean;

  published
    { published declarations }
  end;

implementation

uses UDmFuncionario, SysUtils;

{ TFuncionario }


function TFuncionario.alterar: Boolean;
var
  sql : string;

begin
  Result := True;

  try
    sql :=
    ' UPDATE Funcionarios ' +
    '    SET Fun_Nome = :Fun_Nome ' +
    '       ,Fun_Senha = :Fun_Senha ' +
    '       ,Dp_id = :Dp_id ' +
    '  WHERE  Fun_id = :Fun_id ';


    DmFuncionario.qFuncObj.Close;
    DmFuncionario.qFuncObj.SQL.Text := sql;

    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_Nome').Value := Self.Nome;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_Senha').Value := Self.Senha;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Dp_id').Value := Self.DepId;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_id').Value := Self.Id;

    DmFuncionario.qFuncObj.ExecSQL;

  except on E: Exception do
    begin
      Result := False;
      raise Exception.Create(E.Message);
    end;
  end;

end;


function TFuncionario.excluir: Boolean;
begin
  Result := True;
end;

function TFuncionario.incluir: boolean;
var
  sql : string;

begin
  Result := True;

  try
    sql :=
    ' INSERT INTO Funcionarios     ' +
    '           (Fun_Nome                ' +
    '           ,Fun_Senha               ' +
    '           ,Dp_id)                  ' +
    '     VALUES (                       ' +
    '           :Fun_Nome  ' +
    '           ,:Fun_Senha ' +
    '          ,:Dp_id) ';


    DmFuncionario.qFuncObj.Close;
    DmFuncionario.qFuncObj.SQL.Text := sql;

    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_Nome').Value := Self.Nome;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Fun_Senha').Value := Self.Senha;
    DmFuncionario.qFuncObj.Parameters.ParamByName('Dp_id').Value := Self.DepId;

    DmFuncionario.qFuncObj.ExecSQL;

  except on E: Exception do
    begin
      Result := False;
      raise Exception.Create(E.Message);
    end;
  end;

end;


function TFuncionario.pesquisarId: Boolean;
var
  sql : string;

begin
  Result := True;

   try

      sql :=
      ' select ' +
      '  fun.* ' +
      ' from Funcionarios fun ' ;

       sql := sql + ' where fun.fun_id = :fun_id ';

       DmFuncionario.qPesqFuncObj.Close;
       DmFuncionario.qPesqFuncObj.SQL.Text := sql;
       DmFuncionario.qPesqFuncObj.Parameters.ParamByName('fun_id').Value := Self.Id;
       DmFuncionario.qPesqFuncObj.Open;

       Result := not DmFuncionario.qPesqFuncObj.IsEmpty;

       if Result then
       begin
         Self.Nome := DmFuncionario.qPesqFuncObj.FieldByName('Fun_Nome').AsString;
         Self.Senha := DmFuncionario.qPesqFuncObj.FieldByName('Fun_Senha').AsString;
         self.DepId := DmFuncionario.qPesqFuncObj.FieldByName('Dp_id').AsInteger;
       end;

   except on E: Exception do
     begin
       Result := False;
       raise Exception.Create(E.Message);
     end;
   end;

end;

end.
