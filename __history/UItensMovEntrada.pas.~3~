unit UItensMovEntrada;

interface

Type

  TItensMoviEntrada = class(TObject)
  private
    { private declarations }

      FIdItens : Integer;
      FIdProd : Integer;
      FIdUni : Integer;
      FIdMoe : Integer;
      FImeQuantidade : Double;
      FImeVlrUni : Double;
      FImeVlrTotBruto : Double;
      FImeVlrTotFrete : Double;
      FImeVlrDesconto : Double;
      FImeVlrTotLiquido : Double;

  protected
    { protected declarations }
  public
    { public declarations }
    Property IdItens : Integer read FIdItens write FIdItens;
    Property IdProd : Integer read FIdProd write FIdProd;
    Property IdUni : Integer read FIdUni write FIdUni;
    Property IdMoe : Integer read FIdMoe write FIdMoe;
    Property ImeQuantidade : Double read FImeQuantidade write FImeQuantidade;
    Property ImeVlrUni : Double read FImeVlrUni write FImeVlrUni;
    Property ImeVlrTotBruto : Double read FImeVlrTotBruto write FImeVlrTotBruto;
    Property ImeVlrTotFrete : Double read FImeVlrTotFrete write FImeVlrTotFrete;
    Property ImeVlrDesconto : Double read FImeVlrDesconto write FImeVlrDesconto;
    Property ImeVlrTotLiquido : Double read FImeVlrTotLiquido write FImeVlrTotLiquido;

    Function incluir : boolean;
    function alterar: Boolean;
    function excluir: Boolean;
    function pesquisarIdItensMoviEntra: Boolean;

  published
    { published declarations }
  end;

implementation

Uses
  SysUtils, UDmItensMoviEntrada;

{ TItensMoviEntrada }

function TItensMoviEntrada.alterar: Boolean;
Var
  sqlUpdate,sqlCampos, sqlWhere : String;
begin

 Result := True;

   Try
    sqlCampos :=
      '   UPDATE Itens_Movimentacao_Entrada                 '+
      '     SET Prod_Id = :Prod_Id                          '+
      '        ,Uni_id =  :Uni_id                           '+
      '        ,Ime_Quantidade =  :Ime_Quantidade           '+
      '        ,Ime_Vlr_Tot_Bruto = :Ime_Vlr_Tot_Bruto      '+
      '        ,Ime_Vlr_Tot_Frete = :Ime_Vlr_Tor_Frete      '+
      '        ,Ime_Vlr_Desconto  = :Ime_Vlr_Desconto       '+
      '        ,Moe_id  = :Moe_id                           '+
      '        ,Ime_Vlr_Tot_Liquido = :Ime_Vlr_Tot_Liquido  ';

      sqlWhere :=
      ' WHERE   Ime_id =  :Ime_id                           ';

      sqlUpdate := sqlCampos + sqlWhere;

      DmItensMoviEntrada.qItensMoviEntrada.Close;
      DmItensMoviEntrada.qItensMoviEntrada.SQL.Text := sqlUpdate;

      DmItensMoviEntrada.qItensMoviEntrada.Parameters.ParamByName('Ime_id').Value := Self.IdItens;
      DmItensMoviEntrada.qItensMoviEntrada.Parameters.ParamByName('Prod_Id').Value  := Self.IdProd;
      DmItensMoviEntrada.qItensMoviEntrada.Parameters.ParamByName('Uni_id').Value := Self.IdUni;
      DmItensMoviEntrada.qItensMoviEntrada.Parameters.ParamByName('Ime_Quantidade').Value := Self.ImeQuantidade;
      DmItensMoviEntrada.qItensMoviEntrada.Parameters.ParamByName('Ime_Vlr_Tot_Bruto').Value  := Self.ImeVlrTotBruto;
      DmItensMoviEntrada.qItensMoviEntrada.Parameters.ParamByName('Moe_id').Value := Self.IdMoe;
      DmItensMoviEntrada.qItensMoviEntrada.Parameters.ParamByName('Ime_Vlr_Tot_Liquido').Value  := Self.ImeVlrTotLiquido;

      if Self.ImeVlrDesconto > 0 then
        DmItensMoviEntrada.qItensMoviEntrada.Parameters.ParamByName('Ime_Vlr_Desconto').Value := Self.ImeVlrDesconto;

      if Self.ImeVlrTotFrete > 0 then
        DmItensMoviEntrada.qItensMoviEntrada.Parameters.ParamByName('Ime_Vlr_Tot_Frete').Value  := Self.ImeVlrTotFrete;

      DmItensMoviEntrada.qItensMoviEntrada.ExecSQL;

  except on E: Exception do
    begin
      Result := False;
      raise Exception.Create(E.Message);
    end;

   End;


end;

function TItensMoviEntrada.excluir: Boolean;
begin
 Result := True;

   Try

    Except

    End;


end;

function TItensMoviEntrada.incluir: boolean;
begin
 Result := True;

  Try

  Except

  End;

end;

function TItensMoviEntrada.pesquisarIdItensMoviEntra: Boolean;
begin
 Result := True;

  Try

  Except

  End;


end;

end.
